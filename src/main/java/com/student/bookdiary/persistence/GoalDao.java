package com.student.bookdiary.persistence;

import com.student.bookdiary.model.Goal;

import java.util.List;
import java.util.Optional;

/**
 * Інтерфейс Data Access Object (DAO) для операцій з об'єктами {@link Goal}.
 * Визначає контракт для взаємодії з даними цілей читання у постійному сховищі
 * (наприклад, базі даних). Кожна реалізація цього інтерфейсу буде відповідати
 * за конкретний механізм зберігання та отримання даних про цілі.
 */
public interface GoalDao {

    /**
     * Додає нову ціль до сховища.
     * Після успішного додавання, реалізація цього методу повинна встановити
     * згенерований унікальний ідентифікатор (ID) для переданого об'єкта {@code goal}.
     *
     * @param goal Об'єкт цілі, який потрібно додати. Поле ID в цьому об'єкті буде оновлено.
     * @throws DataAccessException Якщо виникає помилка під час доступу до сховища даних.
     */
    void addGoal(Goal goal);

    /**
     * Оновлює існуючу ціль в сховищі.
     * Ціль для оновлення ідентифікується за її ID.
     *
     * @param goal Об'єкт цілі з оновленими даними. Повинен мати коректний ID існуючої цілі.
     * @throws DataAccessException Якщо виникає помилка під час доступу до сховища даних
     *                             або ціль з вказаним ID не знайдена.
     */
    void updateGoal(Goal goal);

    /**
     * Видаляє ціль зі сховища за її унікальним ідентифікатором (ID).
     *
     * @param goalId ID цілі, яку потрібно видалити.
     * @throws DataAccessException Якщо виникає помилка під час доступу до сховища даних.
     */
    void deleteGoal(long goalId);

    /**
     * Знаходить та повертає ціль зі сховища за її унікальним ідентифікатором (ID).
     *
     * @param goalId ID цілі для пошуку.
     * @return Об'єкт {@link Optional}, що містить знайдену ціль,
     *         або порожній {@link Optional}, якщо ціль з таким ID не знайдена.
     * @throws DataAccessException Якщо виникає помилка під час доступу до сховища даних.
     */
    Optional<Goal> getGoalById(long goalId);

    /**
     * Повертає список всіх цілей, наявних у сховищі.
     * Список може бути порожнім, якщо у сховищі немає жодної цілі.
     *
     * @return {@link List} об'єктів {@link Goal}.
     * @throws DataAccessException Якщо виникає помилка під час доступу до сховища даних.
     */
    List<Goal> getAllGoals();
}